import pandas as pdfrom IPython import embedimport argparsefrom datetime import datetimeimport jsonimport gc'''TO DO:'''class Player:	# Class Attributes	tr = 20	coin = 0	steel = 0	titanium = 0	plant = 0	energy = 0	heat = 0	prod_coin = 0	prod_steel = 0	prod_titanium = 0	prod_plant = 0	prod_energy = 0	prod_heat = 0	# production = {"coin":1, "steel":1}	instances = []	# Initializer	def __init__(self, name, create_backup=True):		self.__class__.instances.append(self)		self.name = name		if create_backup: 			fname = self.to_csv()			print('backup saved to ', fname)	def to_csv(self):		dd = {}		dd['tr'] = self.tr		dd['coin'] = self.coin		dd['steel'] = self.steel		dd['titanium'] = self.titanium		dd['plant'] = self.plant		dd['energy'] = self.energy		dd['heat'] = self.heat 		dd['prod_coin'] = self.prod_coin		dd['prod_steel'] = self.prod_steel		dd['prod_titanium'] = self.prod_titanium		dd['prod_plant'] = self.prod_plant		dd['prod_energy'] = self.prod_energy		dd['prod_heat'] = self.prod_heat		datestring = datetime.now().strftime("%Y-%m-%d")		fname=datestring + '-'+ self.name+ '.json'		json.dump(dd, open(fname, 'w'))		return fname 		# print('saved to ', fname)	def load_csv(self, fname ):		# datestring = datetime.now().strftime("%Y-%m-%d")		# fname = datestring + '-'+ self.name+ '.json'				dd = json.load(open(fname, 'r'))		self.tr = dd['tr']		self.coin = dd['coin']		self.steel = dd['steel']		self.titanium = dd['titanium']		self.plant = dd['plant']		self.energy = dd['energy']		self.heat  = dd['heat']		self.prod_coin = dd['prod_coin']		self.prod_steel = dd['prod_steel']		self.prod_titanium = dd['prod_titanium']		self.prod_plant = dd['prod_plant']		self.prod_energy = dd['prod_energy']		self.prod_heat = dd['prod_heat']		print('loaded ', fname)	# Instance Methods	def player_cache(self):		print("{} has {} TR, {} coin, {} steel, {} titanium, {} plant, {} energy, and {} heat.".format(	    self.name, self.tr, self.coin, self.steel, self.titanium, self.plant, self.energy, self.heat))	def player_production_level(self):		print("{} produces {} coin, {} steel, {} titanium, {} plant, {} energy, and {} heat."			.format(self.name, self.prod_coin, self.prod_steel, self.prod_titanium,				self.prod_plant, self.prod_energy, self.prod_heat))	def change_production(self, resource, change):		if resource.lower() == 'coin':			self.prod_coin += change		elif resource.lower() == 'steel':			self.prod_steel += change		elif resource.lower() == 'titanium':			self.prod_titanium += change		elif resource.lower() == 'plant':			self.prod_plant += change		elif resource.lower() == 'energy':			self.prod_energy += change		elif resource.lower() == 'heat':			self.prod_heat += change		else:			print("We don't recognize that player and/or resource.")		print("{} now produces {} coin, {} steel, {} titanium, {} plant, {} energy, and {} heat."				.format(self.name, self.prod_coin, self.prod_steel, self.prod_titanium,				self.prod_plant, self.prod_energy, self.prod_heat))		self.to_csv()	def player_produce(self):		print("{} had {} TR, {} coin, {} steel, {} titanium, {} plant, {} energy, and {} heat.".format(    		self.name, self.tr, self.coin, self.steel, self.titanium, self.plant, self.energy, self.heat))		self.coin += self.prod_coin + self.tr		self.steel += self.prod_steel		self.titanium += self.prod_titanium		self.plant += self.prod_plant		self.energy += self.prod_energy		self.heat += self.prod_heat		print("{} now has {} TR, {} coin, {} steel, {} titanium, {} plant, {} energy, and {} heat.".format(    		self.name, self.tr, self.coin, self.steel, self.titanium, self.plant, self.energy, self.heat))		self.to_csv()	def print_player_name(self):		print(self.name)	def change_cache(self, resource, change):		if resource.lower() == 'coin':			self.coin += change		elif resource.lower() == 'tr': 			self.tr += change 		elif resource.lower() == 'steel':			self.steel += change		elif resource.lower() == 'titanium':			self.titanium += change		elif resource.lower() == 'plant':			self.plant += change		elif resource.lower() == 'energy':			self.energy += change		elif resource.lower() == 'heat':			self.heat += change		else:			print("We don't recognize that resource and/or player.")		print("{} now has {} coin, {} steel, {} titanium, {} plant, {} energy, and {} heat."				.format(self.name, self.coin, self.steel, self.titanium,				self.plant, self.energy, self.heat))		self.to_csv()# player_objects = []player_names = []player2ins = {}def all_production_level():	for player in player2ins.values():		player.player_production_level()def all_produce():	for player in player2ins.values():		player.player_produce()def all_cache():	for player in player2ins.values():		player.player_cache()operations = ('1', '2', '3', '4', '5', '6', 'x', 'm', 'cache', 'prod', 'card', 'p', 'change')resources = ('coin', 'steel', 'titanium', 'plant', 'energy', 'heat')game_menu = '''OPTIONS:    "c" or "cache": see all players' current cache    "card": play a card    "ch" or "change": change production levels (coin, steel, titanium, plant, energy, or heat)    "m" or "menu": print the menu again    "p" or "production": see all players' current production levels    "r" or "resource": produce or spend resources    "u" or "produce": round of production for all players and all resources    "x": shut down the application    "all:" cache and production    '''line = "-------------------------------------------------------"def command_center():	x=0	while x==0:		backup = input("Would you like to load backed up player data? y/n ")		if backup == 'Y' or backup == 'y':			load_backup = True			# inp = input("Copy the names of the files here separated by commas: ")			# fnames = [x.strip() for x in inp.split(",")]			fnames = ['2020-04-28-a.json', '2020-04-28-k.json']			print('loading ', fnames)			x=1		elif backup == 'N' or backup == 'n': 			load_backup = False			x=1		else:			print("Please enter 'y' or 'n'")				#FNAMES = ['2020-04-28-a.json,2020-04-28-k.json']	while x==1: # this is for setup phase only		if load_backup:			for fname in fnames:				name = fname.split('-')[3].split('.')[0]				player2ins[name] = Player(name, create_backup=False)				player_names.append(name)				ins = player2ins[name]				ins.load_csv(fname)		else: 			inp = input("List the names of the players separated by commas: ")			names = [x.strip() for x in inp.split(",")]			for name in names:				player_names.append(name)				player2ins[name] = Player(name)			print("THE SETUP PHASE IS COMPLETE. YOU HAVE ADDED THESE PLAYERS: ", player_names, '\n', line)		x=2	while x==2:		print(game_menu)		inp = input('Enter your choice here: ').lower()		try: 			if inp == 'c' or inp == 'cache':				print("ALL PLAYERS' CURRENT CACHE:")				all_cache()				print(line)			elif inp == 'card':				print("Sorry, we've haven't programmed in any cards yet.", '\n', line)			elif inp == 'ch' or inp == 'change':				params = input("List the player, resource, and the change (as an integer with a negative sign if needed) separated by commas: ")				params_list = [x.strip() for x in params.split(",")]				ins = player2ins[params_list[0]]				resource = params_list[1]				change = int(params_list[2])				ins.change_production(resource, change)				print(line)			elif inp == 'm' or inp=="menu":				print(game_menu)			elif inp == 'p' or inp == 'production':				print("ALL PLAYERS' CURRENT PRODUCTION LEVELS:")				all_production_level()				print(line)						elif inp == 'r' or  inp=='resource':				params = input("List the player, resource, and the amount spent separated by commas: ")				params_list = [x.strip() for x in params.split(",")]				ins = player2ins[params_list[0]]				resource = params_list[1]				change = int(params_list[2])				ins.change_cache(resource, change)				print(line)			elif inp == 'u' or inp=='produce':				all_produce()				print(line)			elif inp == 'all':				print("ALL PLAYERS' CURRENT CACHE:")				all_cache()				print(line)				print("ALL PLAYERS' CURRENT PRODUCTION LEVELS:")				all_production_level()				print(line)			elif inp == 'x': # this is printing out the input for s				# datestring = datetime.now().strftime("%Y-%m-%d-%H-%M-%S")				# file_name = ''.join([datestring, '.txt'])				# json_version = df.to_json()				# with open(file_name, 'w') as outfile:				# 	json.dump(json_version, outfile)				# pr				int("We've saved your current production levels to", file_name, '\n', line)				x = 3			elif inp not in operations:				print("Sorry, we're not sure what to do with that input.")		except:			print('error') command_center()