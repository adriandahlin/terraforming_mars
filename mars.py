import pandas as pdfrom IPython import embedimport argparsefrom datetime import datetimeimport jsonimport gcclass Player:	# Class Attributes	tr = 20	coin = 0	steel = 0	ore = 0	plant = 0	energy = 0	heat = 0	prod_coin = 1	prod_steel = 1	prod_ore = 1	prod_plant = 1	prod_energy = 1	prod_heat = 1	# production = {"coin":1, "steel":1}	instances = []	# Initializer	def __init__(self, name):		self.__class__.instances.append(self)		self.name = name	# Instance Methods	def player_cache(player):		print("{} has {} TR, {} coin, {} steel, {} ore, {} plant, {} energy, and {} heat.".format(	    player.name, player.tr, player.coin, player.steel, player.ore, player.plant, player.energy, player.heat))	def player_production_level(self):		print("{} produces {} coin, {} steel, {} ore, {} plant, {} energy, and {} heat."			.format(self.name, self.prod_coin, self.prod_steel, self.prod_ore,				self.prod_plant, self.prod_energy, self.prod_heat))	def change_production(self, resource, change):		if resource.lower() == 'coin':			self.prod_coin += change		elif resource.lower() == 'steel':			self.prod_steel += change		elif resource.lower() == 'ore':			self.prod_ore += change		elif resource.lower() == 'plant':			self.prod_plant += change		elif resource.lower() == 'energy':			self.prod_energy += change		elif resource.lower() == 'heat':			self.prod_heat += change		else:			print("We don't recognize that player.")		print("{} now produces {} coin, {} steel, {} ore, {} plant, {} energy, and {} heat."				.format(self.name, self.prod_coin, self.prod_steel, self.prod_ore,				self.prod_plant, self.prod_energy, self.prod_heat))	def player_produce(self):		print("{} had {} TR, {} coin, {} steel, {} ore, {} plant, {} energy, and {} heat.".format(    		self.name, self.tr, self.coin, self.steel, self.ore, self.plant, self.energy, self.heat))		self.coin += self.prod_coin		self.steel += self.prod_steel		self.ore += self.prod_ore		self.plant += self.prod_plant		self.energy += self.prod_energy		self.heat += self.prod_heat		print("{} now has {} TR, {} coin, {} steel, {} ore, {} plant, {} energy, and {} heat.".format(    		self.name, self.tr, self.coin, self.steel, self.ore, self.plant, self.energy, self.heat))	def print_player_name(player):		print(player.name)operations = ('1', '2', '3', '4', '5', '6', 'x', 'm', 'cache', 'prod', 'card', 'p', 'change')resources = ('coin', 'steel', 'ore', 'plant', 'energy', 'heat')game_menu = '''OPTIONS:    "cache": see all players' current cache    "prod": see all players' current production levels    "p": print all players' names    1-6: see that player's current production    "change": change production levels    "card": play a card    "m": print the menu again    "x": shut down the application'''setup_menu = '''OPTIONS:    "add": add a player name    "p": print all players' names    "done": end the setup phase    "x": shut down the application''' line = "-------------------------------------------------------"player_objects = []player_names = []def all_production_level():	for player in player_objects:		player.player_production_level()def all_produce():	for player in player_objects:		player.player_produce()def all_cache():	for player in player_objects:		player.player_cache()def command_center():	print(setup_menu)	x=0	while x==0: # this is for setup phase only		inp = input('Enter your choice here: ').lower()		if inp == 'add':			inp = input("List the names of the players separated by commas: ")			names = inp.split(",")			for name in names:				Player(name)				player_objects.append(Player(name))				player_names.append(name)		elif inp == 'p':			print("You have added these players: ", player_names)		elif inp == 'done':			if len(player_names) > 0:				print("THE SETUP PHASE IS COMPLETE. YOU HAVE ADDED THESE PLAYERS: ", player_names, '\n', line)				print(game_menu)				x=1			else:				print("You must add players first.")		elif inp == 'x':			x=2	while x==1:		inp = input('Enter your choice here: ').lower()		if inp == 'cache':			print("ALL PLAYERS' CURRENT CACHE:")			all_cache()			print(line)		elif inp == 'x':			# datestring = datetime.now().strftime("%Y-%m-%d-%H-%M-%S")			# file_name = ''.join([datestring, '.txt'])			# json_version = df.to_json()			# with open(file_name, 'w') as outfile:			# 	json.dump(json_version, outfile)			# print("We've saved your current production levels to", file_name, '\n', line)			x = 2		elif inp == 'm':			print(game_menu)		elif inp == 'p':			print("You have added these players: ", player_names)		elif inp == 'prod':			print("ALL PLAYERS' CURRENT PRODUCTION LEVELS:")			all_production_level()			print(line)		elif inp == 'change':			player = input("Which PLAYER's production would you like to change? ")			resource = input("Which RESOURCE would you like to adjust? ")			change = int(input("Enter an INTEGER. Include a minus sign before it to reduce production. "))			Player(player).change_production(resource, change)		elif inp not in operations:			print("Sorry, we're not sure what to do with that input.")command_center()